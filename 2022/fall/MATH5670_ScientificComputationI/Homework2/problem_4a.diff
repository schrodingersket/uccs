diff --git a/../fdmbook/matlab/bvp_2.m b/problem_4a.m
old mode 100644
new mode 100755
index 1e795de..35573f8
--- a/../fdmbook/matlab/bvp_2.m
+++ b/problem_4a.m
@@ -1,3 +1,4 @@
+#!/usr/bin/octave
 %
 % bvp_2.m 
 % second order finite difference method for the bvp
@@ -13,11 +14,11 @@
 
 ax = 0;
 bx = 3;
-sigma = -5;   % Neumann boundary condition at ax
-beta = 3;     % Dirichlet boundary condtion at bx
+sigma = -5;   % Neumann boundary condition at bx
+beta = 3;     % Dirichlet boundary condtion at ax
 
 f = @(x) exp(x);  % right hand side function
-utrue = @(x) exp(x) + (sigma-exp(ax))*(x - bx) + beta - exp(bx);  % true soln
+utrue = @(x) exp(x) + (sigma-exp(bx))*(x - ax) + beta - exp(ax);  % true soln
 
 % true solution on fine grid for plotting:
 xfine = linspace(ax,bx,101);
@@ -41,22 +42,22 @@ for jtest=1:ntest
 
   % set up matrix A (using sparse matrix storage):
   A = spalloc(m2,m2,3*m2);   % initialize to zero matrix
-
-  % first row for Neumann BC at ax:
-  A(1,1:3) = fdcoeffF(1, x(1), x(1:3)); 
+  
+  % first row for Dirichlet BC at ax:
+  A(1,1:3) = fdcoeffF(0,x(1),x(1:3)); 
 
   % interior rows:
   for i=2:m1
      A(i,i-1:i+1) = fdcoeffF(2, x(i), x((i-1):(i+1)));
      end
 
-  % last row for Dirichlet BC at bx:
-  A(m2,m:m2) = fdcoeffF(0,x(m2),x(m:m2)); 
+  % last row for Neumann BC at bx:
+  A(m2,m:m2) = fdcoeffF(1, x(m2), x(m:m2)); 
   
   % Right hand side:
   F = f(x); 
-  F(1) = sigma;  
-  F(m2) = beta;
+  F(1) = beta;  
+  F(m2) = sigma;
   
   % solve linear system:
   U = A\F;
@@ -78,6 +79,7 @@ for jtest=1:ntest
   
   % pause to see this plot:  
   drawnow
+  print('-dpng', sprintf('problem4a_%i_grid_points.png', m2));
   input('Hit <return> to continue ');
   
   end
